import pandas as pd
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# ========== STEP 1: Load and Clean Data ==========

def group_courses(course):
    course = course.lower()
    if any(keyword in course for keyword in ['html', 'css', 'javascript', 'react', 'node', 'mern', 'web']):
        return 'Web Dev'
    elif any(keyword in course for keyword in ['java', 'python', 'c++', 'programming']):
        return 'Programming'
    elif any(keyword in course for keyword in ['cyber', 'network', 'security']):
        return 'Security'
    elif any(keyword in course for keyword in ['data', 'ml', 'ai', 'analytics']):
        return 'Data Science'
    else:
        return 'Other'

def train_model(csv_file):
    df = pd.read_csv(csv_file)

    # Clean unwanted course names
    df = df[~df['CourseName'].str.lower().isin(['medium', 'basic', 'beginner', 'advanced'])]

    # Group similar courses
    df['CourseGroup'] = df['CourseName'].apply(group_courses)

    # Remove underrepresented categories
    course_counts = df['CourseGroup'].value_counts()
    valid_courses = course_counts[course_counts >= 3].index
    df = df[df['CourseGroup'].isin(valid_courses)]

    # Save numeric difficulty before encoding
    df['DifficultyNumeric'] = df['Difficulty'].map({'Easy': 0, 'Medium': 1, 'Hard': 2})

    # Encode categorical columns
    le_difficulty = LabelEncoder()
    le_stream = LabelEncoder()
    le_course = LabelEncoder()

    df['Difficulty'] = le_difficulty.fit_transform(df['Difficulty'])
    df['Stream'] = le_stream.fit_transform(df['Stream'])
    df['CourseGroup'] = le_course.fit_transform(df['CourseGroup'])

    # Convert percentages
    df['Percentage'] = df['Percentage'].astype(float)

    # Scale percentages
    scaler = StandardScaler()
    df['Percentage'] = scaler.fit_transform(df[['Percentage']])

    # Features and target
    X = df[['Stream', 'Difficulty', 'Percentage']]
    y = df['CourseGroup']

    # Train/test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train XGBoost model
    model = XGBClassifier(
        n_estimators=300,
        max_depth=10,
        learning_rate=0.05,
        subsample=0.9,
        colsample_bytree=0.9,
        gamma=0.1,
        reg_alpha=0.1,
        reg_lambda=1,
        use_label_encoder=False,
        eval_metric='mlogloss',
        random_state=42
    )
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"‚ú™ Model Accuracy: {accuracy:.2f}")

    return model, le_difficulty, le_stream, le_course, scaler, df

# ========== STEP 2: Suggestion Logic ==========

def calculate_percentages(user_level_sheet):
    percentages = {}
    for level in ['Easy', 'Medium', 'Hard']:
        total = user_level_sheet.get(level.lower(), {}).get('total_question', 0)
        right = user_level_sheet.get(level.lower(), {}).get('right', 0)
        percentages[level] = (right / total * 100) if total > 0 else 0
    return percentages

def get_suggestions(user_level_sheet, model, le_difficulty, le_stream, le_course, scaler, df):
    print("üîç Raw user input:", user_level_sheet)

    percentages = calculate_percentages(user_level_sheet)
    print("üìä Calculated percentages:", percentages)

    stream = user_level_sheet.get('Stream', None)
    if stream is None:
        # print("‚ùå Stream not provided.")
        return {"error": "Stream not provided"}

    try:
        encoded_stream = le_stream.transform([stream])[0]
        print(f"üî° Encoded stream '{stream}':", encoded_stream)
    except ValueError:
        # print(f"‚ùå Stream '{stream}' not found in the training data.")
        return {"error": f"Stream '{stream}' not found in the training data"}

    suggestions = []
    for difficulty, score in percentages.items():
        try:
            encoded_difficulty = le_difficulty.transform([difficulty.capitalize()])[0]
            # print(f"üéØ Difficulty '{difficulty}' encoded as:", encoded_difficulty)
        except ValueError:
            # print(f"‚ùå Difficulty '{difficulty}' not found in training data.")
            continue

        # ‚úÖ Fixed: Scale only the percentage
        score_scaled = scaler.transform([[score]])[0][0]
        # print(f"üìà Scaled score for {difficulty}:", score_scaled)

        prediction_input = pd.DataFrame([[encoded_stream, encoded_difficulty, score_scaled]],
                                        columns=['Stream', 'Difficulty', 'Percentage'])
        predicted_label = model.predict(prediction_input)[0]
        predicted_course_name = le_course.inverse_transform([predicted_label])[0]

        # ‚úÖ Retrieve a matching row randomly from the original dataframe
        course_row = df[df['CourseGroup'] == predicted_label].sample(1).iloc[0]

        suggestions.append({
            "Difficulty": difficulty.capitalize(),
            "Course": {
                "Name": course_row['CourseName'],
                "Link": course_row['CourseLink'],
                "VideoLink": course_row['CourseVideoLink']
            }
        })

    print("‚úÖ Final suggestions:", suggestions)
    return suggestions

# ========== STEP 3: Train Once and Export for Flask ==========

model, le_difficulty, le_stream, le_course, scaler, df = train_model("ABC_final_modified_with_labels_main.csv")
